const { sequelize } = require('./src/config/database');
const { QueryTypes } = require('sequelize');

async function corregirTablasCategorias() {
  console.log('üîß Iniciando correcci√≥n de tablas de categor√≠as y configuraciones...');

  try {
    // 1. Verificar si existen ambas tablas
    const tablas = await sequelize.query("SELECT tablename FROM pg_tables WHERE schemaname = 'public' AND (tablename = 'categories' OR tablename = 'Categories')", {
      type: QueryTypes.SELECT
    });
    
    const tablasExistentes = tablas.map(t => t.tablename);
    console.log(`üìã Tablas encontradas: ${tablasExistentes.join(', ')}`);

    // Si ambas tablas existen, necesitamos consolidarlas
    if (tablasExistentes.includes('categories') && tablasExistentes.includes('Categories')) {
      console.log('‚ö†Ô∏è Se encontraron dos tablas de categor√≠as (categories y Categories). Consolidando...');

      // 2. Comprobar si hay datos en la tabla 'Categories'
      const categoriasCapital = await sequelize.query("SELECT * FROM \"Categories\"", {
        type: QueryTypes.SELECT
      });
      
      console.log(`üìä Encontradas ${categoriasCapital.length} categor√≠as en la tabla "Categories" (may√∫sculas)`);

      // 3. Si hay datos en la tabla 'Categories', migrar a 'categories'
      if (categoriasCapital.length > 0) {
        console.log('üîÑ Migrando datos de "Categories" a "categories"...');
        
        // Por cada categor√≠a en 'Categories', insertarla en 'categories' si no existe
        for (const cat of categoriasCapital) {
          // Verificar si ya existe en 'categories'
          const existe = await sequelize.query(`SELECT * FROM categories WHERE id = '${cat.id}'`, {
            type: QueryTypes.SELECT
          });

          if (existe.length === 0) {
            // No existe, insertar
            await sequelize.query(`
              INSERT INTO categories (id, name, description, icon, "isActive", "createdAt", "updatedAt")
              VALUES ('${cat.id}', '${cat.name.replace("'", "''")}', 
                     ${cat.description ? `'${cat.description.replace("'", "''")}'` : 'NULL'}, 
                     ${cat.icon ? `'${cat.icon.replace("'", "''")}'` : 'NULL'}, 
                     ${cat.isActive}, 
                     '${cat.createdAt.toISOString()}', 
                     '${cat.updatedAt.toISOString()}')
            `, { type: QueryTypes.INSERT });
            console.log(`‚úÖ Migrada categor√≠a "${cat.name}" con ID ${cat.id}`);
          } else {
            console.log(`‚ö†Ô∏è La categor√≠a "${cat.name}" con ID ${cat.id} ya existe en 'categories', omitiendo`);
          }
        }
      }

      // 4. Eliminar las restricciones de clave for√°nea que apuntan a 'Categories'
      console.log('üîÑ Eliminando restricci√≥n de clave for√°nea que apunta a "Categories"...');
      try {
        await sequelize.query('ALTER TABLE category_configs DROP CONSTRAINT IF EXISTS category_configs_category_id_fkey', {
          type: QueryTypes.RAW
        });
        console.log('‚úÖ Restricci√≥n category_configs_category_id_fkey eliminada o no exist√≠a');
      } catch (error) {
        console.error('‚ùå Error al eliminar restricci√≥n category_configs_category_id_fkey:', error.message);
      }
      
      // 5. Eliminar la tabla 'Categories' si ya no es necesaria
      try {
        await sequelize.query('DROP TABLE IF EXISTS "Categories"', {
          type: QueryTypes.RAW
        });
        console.log('‚úÖ Tabla "Categories" eliminada');
      } catch (error) {
        console.error('‚ùå Error al eliminar la tabla "Categories":', error.message);
      }
    } else if (!tablasExistentes.includes('categories')) {
      console.log('‚ö†Ô∏è No se encontr√≥ la tabla "categories" (min√∫sculas), solo existe "Categories"');
      console.log('üîÑ Renombrando tabla "Categories" a "categories"...');
      
      // Renombrar la tabla
      await sequelize.query('ALTER TABLE "Categories" RENAME TO categories', {
        type: QueryTypes.RAW
      });
      console.log('‚úÖ Tabla renombrada exitosamente');
    }
    
    // 6. Verificar que la restricci√≥n de clave for√°nea apunte a la tabla correcta
    console.log('üîç Verificando restricciones de clave for√°nea en category_configs...');
    const restricciones = await sequelize.query(
      `SELECT 
        conname as restriccion, 
        pg_get_constraintdef(oid) as definicion
      FROM pg_constraint 
      WHERE conrelid = 'category_configs'::regclass`,
      { type: QueryTypes.SELECT }
    );
    
    console.log('üìã Restricciones actuales:');
    restricciones.forEach(r => {
      console.log(`- ${r.restriccion}: ${r.definicion}`);
    });

    // 7. Si no existe la restricci√≥n correcta, crearla
    const tieneRestriccionCorrecta = restricciones.some(r => 
      r.definicion.includes('REFERENCES categories(id)')
    );
    
    if (!tieneRestriccionCorrecta) {
      console.log('üîÑ Creando restricci√≥n de clave for√°nea correcta...');
      try {
        // Primero eliminar cualquier √≠ndice √∫nico que pueda causar problemas
        await sequelize.query('DROP INDEX IF EXISTS category_configs_category_id', {
          type: QueryTypes.RAW
        });
        
        // Luego crear la restricci√≥n correcta
        await sequelize.query(
          'ALTER TABLE category_configs ADD CONSTRAINT category_configs_category_id_fkey FOREIGN KEY (category_id) REFERENCES categories(id)',
          { type: QueryTypes.RAW }
        );
        console.log('‚úÖ Restricci√≥n de clave for√°nea creada correctamente');
      } catch (error) {
        console.error('‚ùå Error al crear restricci√≥n de clave for√°nea:', error.message);
      }
    }

    console.log('üéâ Proceso de correcci√≥n completado');
  } catch (error) {
    console.error('‚ùå Error durante el proceso de correcci√≥n:', error);
  } finally {
    await sequelize.close();
    console.log('üîå Conexi√≥n cerrada');
  }
}

// Ejecutar la correcci√≥n
corregirTablasCategorias();
