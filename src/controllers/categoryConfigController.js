const CategoryConfig = require('../models/CategoryConfig');
const Category = require('../models/Category');
const { Op } = require('sequelize');

// Obtener configuraciones de todas las categor√≠as
exports.getAllCategoryConfigs = async (req, res) => {
  try {
    const configs = await CategoryConfig.findAll({
      include: [{
        model: Category,
        as: 'category',
        attributes: ['id', 'name', 'description', 'icon']
      }]
    });
    res.status(200).json(configs);
  } catch (error) {
    console.error('Error al obtener configuraciones de categor√≠as:', error);
    res.status(500).json({ message: 'Error al obtener configuraciones de categor√≠as' });
  }
};

// Obtener configuraci√≥n de una categor√≠a espec√≠fica
exports.getCategoryConfig = async (req, res) => {
  const { categoryId } = req.params;
  
  try {
    const config = await CategoryConfig.findOne({
      where: { categoryId },
      include: [{
        model: Category,
        as: 'category',
        attributes: ['id', 'name', 'description', 'icon']
      }]
    });
    
    if (!config) {
      return res.status(404).json({ message: 'No se encontr√≥ configuraci√≥n para esta categor√≠a' });
    }
    
    res.status(200).json(config);
  } catch (error) {
    console.error(`Error al obtener configuraci√≥n de categor√≠a ${categoryId}:`, error);
    res.status(500).json({ message: 'Error al obtener configuraci√≥n de categor√≠a' });
  }
};

// Crear o actualizar configuraci√≥n de categor√≠a
exports.createOrUpdateCategoryConfig = async (req, res) => {
  const { categoryId, minBetAmount } = req.body;
  
  try {
    // Verificar que la categor√≠a exista
    const category = await Category.findByPk(categoryId);
    if (!category) {
      return res.status(404).json({ message: 'La categor√≠a no existe' });
    }
    
    // Buscar si ya existe configuraci√≥n para esta categor√≠a
    const [config, created] = await CategoryConfig.findOrCreate({
      where: { categoryId },
      defaults: { minBetAmount }
    });
    
    // Si ya exist√≠a, actualizar
    if (!created) {
      await config.update({ minBetAmount });
    }
    
    // Obtener la configuraci√≥n actualizada con los datos de la categor√≠a
    const updatedConfig = await CategoryConfig.findOne({
      where: { categoryId },
      include: [{
        model: Category,
        as: 'category',
        attributes: ['id', 'name', 'description', 'icon']
      }]
    });
    
    res.status(created ? 201 : 200).json(updatedConfig);
  } catch (error) {
    console.error('Error al crear/actualizar configuraci√≥n de categor√≠a:', error);
    res.status(500).json({ message: 'Error al crear/actualizar configuraci√≥n de categor√≠a' });
  }
};

// Actualizar configuraci√≥n de una categor√≠a espec√≠fica
exports.updateCategoryConfig = async (req, res) => {
  const { categoryId } = req.params;
  const { minBetAmount, isActive } = req.body;
  
  try {
    const config = await CategoryConfig.findOne({
      where: { categoryId }
    });
    
    if (!config) {
      return res.status(404).json({ message: 'No se encontr√≥ configuraci√≥n para esta categor√≠a' });
    }
    
    // Actualizar solo los campos proporcionados
    await config.update({
      ...(minBetAmount !== undefined && { minBetAmount }),
      ...(isActive !== undefined && { isActive })
    });
    
    // Obtener la configuraci√≥n actualizada con los datos de la categor√≠a
    const updatedConfig = await CategoryConfig.findOne({
      where: { categoryId },
      include: [{
        model: Category,
        as: 'category',
        attributes: ['id', 'name', 'description', 'icon']
      }]
    });
    
    res.status(200).json(updatedConfig);
  } catch (error) {
    console.error(`Error al actualizar configuraci√≥n de categor√≠a ${categoryId}:`, error);
    res.status(500).json({ message: 'Error al actualizar configuraci√≥n de categor√≠a' });
  }
};

// Establecer montos m√≠nimos para m√∫ltiples categor√≠as
exports.bulkUpdateMinBets = async (req, res) => {
  console.log('üìù Recibida petici√≥n de actualizaci√≥n de montos m√≠nimos:', JSON.stringify(req.body, null, 2));
  
  const { configUpdates } = req.body;
  
  if (!Array.isArray(configUpdates) || configUpdates.length === 0) {
    console.log('‚ö†Ô∏è Formato inv√°lido: configUpdates no es un array o est√° vac√≠o');
    return res.status(400).json({ message: 'Se requiere un array de actualizaciones' });
  }

  console.log(`üîÑ Procesando actualizaci√≥n para ${configUpdates.length} categor√≠as`);
  
  // Verificar tipos de datos antes de iniciar la transacci√≥n
  for (const update of configUpdates) {
    const { categoryId, minBetAmount } = update;
    
    if (!categoryId || typeof categoryId !== 'string') {
      console.error(`‚ùå categoryId inv√°lido: ${categoryId}`, typeof categoryId);
      return res.status(400).json({
        message: 'categoryId debe ser un string v√°lido',
        invalidData: update
      });
    }
    
    if (minBetAmount === undefined || isNaN(Number(minBetAmount))) {
      console.error(`‚ùå minBetAmount inv√°lido: ${minBetAmount}`, typeof minBetAmount);
      return res.status(400).json({
        message: 'minBetAmount debe ser un n√∫mero v√°lido',
        invalidData: update
      });
    }
  }
  
  let transaction;
  try {
    transaction = await CategoryConfig.sequelize.transaction();
    console.log('üîÑ Transacci√≥n iniciada');
    
    const results = [];
    
    for (const update of configUpdates) {
      const { categoryId, minBetAmount } = update;
      console.log(`üîÑ Procesando categor√≠a ${categoryId} con monto ${minBetAmount}`);
      
      // Verificar que la categor√≠a exista
      const category = await Category.findByPk(categoryId, { transaction });
      if (!category) {
        console.error(`‚ùå La categor√≠a con ID ${categoryId} no existe`);
        throw new Error(`La categor√≠a con ID ${categoryId} no existe`);
      }
      console.log(`‚úÖ Categor√≠a ${categoryId} (${category.name}) encontrada`);
      
      try {
        // Crear o actualizar la configuraci√≥n
        const [config, created] = await CategoryConfig.findOrCreate({
          where: { categoryId },
          defaults: { minBetAmount: Number(minBetAmount) },
          transaction
        });
        
        if (!created) {
          console.log(`üîÑ Actualizando configuraci√≥n existente para categor√≠a ${categoryId}`);
          await config.update({ minBetAmount: Number(minBetAmount) }, { transaction });
        } else {
          console.log(`‚úÖ Creada nueva configuraci√≥n para categor√≠a ${categoryId}`);
        }
        
        results.push({ categoryId, updated: true });
      } catch (configError) {
        console.error(`‚ùå Error al procesar configuraci√≥n para ${categoryId}:`, configError);
        throw configError;
      }
    }
    
    await transaction.commit();
    console.log('‚úÖ Transacci√≥n completada exitosamente');
    res.status(200).json({ message: 'Actualizaciones completadas', results });
  } catch (error) {
    console.error('‚ùå Error en actualizaci√≥n masiva de configuraciones:', error);
    if (transaction) {
      try {
        await transaction.rollback();
        console.log('üîÑ Rollback de transacci√≥n completado');
      } catch (rollbackError) {
        console.error('‚ùå Error durante rollback:', rollbackError);
      }
    }
    
    res.status(500).json({ 
      message: 'Error al actualizar configuraciones de categor√≠as', 
      error: error.message,
      stack: error.stack
    });
  }
};
